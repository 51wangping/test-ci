name: Commands Action

on: issue_comment

permissions: write-all

jobs:
  check_comments:
    name: Check comments for /cherry_pick
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request }}
    outputs: 
      command-name: ${{ steps.command.outputs.command-name }}
      command-arguments: ${{ steps.command.outputs.command-arguments }}
    steps:
      - name: Check for Command
        id: command
        uses: xt0rted/slash-command-action@v1
        with:
          command: cherry_pick
          reaction: "true"
          reaction-type: "eyes"
          allow-edits: "false"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Echo Command
        run: echo "The command was '${{ steps.command.outputs.command-name }}' with arguments '${{ steps.command.outputs.command-arguments }}'"

  cherry_pick_command:
    name: Cherry Pick Command
    runs-on: ubuntu-latest
    needs: check_comments
    if: ${{ needs.check_comments.outputs.command-name == 'cherry_pick' && needs.check_comments.outputs.command-arguments != '' }}
    steps:
      - name: get PR details
        id: pr_info
        uses: actions/github-script@v6
        with:
          script: |
            const response = await github.rest.pulls.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number
            });

            const head_name = response.data.head.ref;

            // 创建一个新的 pr 到 command-arguments 分支 
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `chore: cherry pick #${context.issue.number} to ${{ needs.check_comments.outputs.command-arguments}}`,
              head: head_name,
              base: `${{ needs.check_comments.outputs.command-arguments }}`
            });
        with:
          repo-token: ${{ secrets.PAT_TOKEN }}
